{{- define "rstudio.blurb" }}
  {{- if eq .Name "rstudio-connect" -}}
Business Users and Collaborators use R and Python data products on [RStudio Connect](https://www.rstudio.com/products/connect/)
that are published by Data Scientists.
  {{- else if eq .Name "rstudio-pm" -}}
IT Administrators use [RStudio Package Manager](https://www.rstudio.com/products/package-manager/) to control and manage
R and Python packages that Data Scientists need to create and share data products.
  {{- else if eq .Name "rstudio-workbench" -}}
Data Scientists use [RStudio Workbench](https://www.rstudio.com/products/workbench/) to analyze data and create data
products using R and Python.
  {{- end -}}
{{- end }}

{{- define "rstudio.description" }}
  {{- print "#### _" }}{{- template "chart.description" . }}_
  {{- print "" | nindent 0 }}
  {{- print "" | nindent 0 }}
  {{- template "rstudio.blurb" . }}
{{- end }}

{{- define "rstudio.header" }}
  {{- if eq .Name "rstudio-connect" -}}
# RStudio Connect
  {{- else if eq .Name "rstudio-pm" -}}
# RStudio Package Manager
  {{- else if eq .Name "rstudio-workbench" -}}
# RStudio Workbench
  {{- else -}}
{{ template "chart.header" . }}
  {{- end }}
{{ print "" | nindent 0 }}
{{- end }}


{{- define "rstudio.disclaimer" }}

## For Production

To ensure a stable production deployment, please:

* Ensure you "pin" the version of the Helm chart that you are using. You can do
  this using the `helm dependency` command and the associated "Chart.lock" files
  or the `--version` flag. **IMPORTANT: This protects you from breaking changes**
* Before upgrading, to avoid breaking changes, use `helm diff upgrade` to check
  for breaking changes
* Pay close attention to [`NEWS.md`](./NEWS.md) for updates on breaking
  changes, as well as documentation below on how to use the chart

{{- end }}

{{- define "rstudio.best-practices" }}

## Best Practices

Helm charts are very useful tools for deploying resources into Kubernetes, however, they do require
some familiarity with kubernetes and `helm` itself. Please ensure you have adequate training and
IT support before deploying these charts into production environments. Reach out to your account representative
if you need help deciding whether helm is a good choice for your deployment.

To ensure reproducibility in your environment and insulate yourself from future changes, please:

* Ensure you "pin" the version of the Helm chart that you are using. You can do
  this using the `helm dependency` command and the associated "Chart.lock" files
  or the `--version` flag. **IMPORTANT: This protects you from breaking changes**
* Before upgrading, to avoid breaking changes, use the `helm-diff` plugin and `helm diff upgrade` to check
  for breaking changes
* Read [`NEWS.md`](./NEWS.md) for updates on breaking
  changes, as well as documentation below on how to use the chart

{{- end }}

{{- define "rstudio.install" }}
{{- $isDev := (regexMatch "[0-9]+\\.[0-9]+\\.[0-9]+-[a-zA-Z\\.0-9]+" .Version) }}

## Installing the Chart

To install the chart with the release name `my-release` at version {{ template "chart.version" . }}:

```bash
helm repo add rstudio https://helm.rstudio.com
{{- if not $isDev }}
helm upgrade --install my-release rstudio/{{ template "chart.name" . }} --version={{ template "chart.version" . }}
{{- else }}
# to install latest release (NOTE: `--version` flag still recommended!)
helm upgrade --install my-release rstudio/{{ template "chart.name" . }}

# WARNING: to install devel version / release candidate / etc.
helm upgrade --install --devel my-release rstudio/{{ template "chart.name" . }} --version={{ template "chart.version" . }}
{{- end }}
```

To explore other chart versions, take a look at:
```
helm search repo {{ if $isDev }}--devel {{ end }}rstudio/{{ template "chart.name" . }} -l
```

{{- end }}

{{- define "rstudio.licensing" }}

## Licensing

This chart supports activating the product using a license file, license key, or license server. In the case of a license file or key, we recommend against placing it in your values file directly.

### License File

We recommend storing a license file as a `Secret` and setting the `license.file.secret` and `license.file.secretKey` values accordingly.

First, create the secret declaratively with YAML or imperatively using the following command:

  {{- if eq .Name "rstudio-connect" -}}
`kubectl create secret generic connect-license --from-file=licenses/connect.lic`
  {{- else if eq .Name "rstudio-pm" -}}
`kubectl create secret generic package-manager-license --from-file=licenses/package-manager.lic`
  {{- else if eq .Name "rstudio-workbench" -}}
`kubectl create secret generic workbench-license --from-file=licenses/workbench.lic`
  {{- else -}}
{{ template "chart.header" . }}
  {{- end }}

Second, specify the following values:

```yaml
license:
  file:

  {{- if eq .Name "rstudio-connect" -}}
    secret: connect-license
    secretKey: connect.lic
  {{- else if eq .Name "rstudio-pm" -}}
    secret: package-manager-license
    secretKey: package-manager.lic
  {{- else if eq .Name "rstudio-workbench" -}}
    secret: workbench-license
    secretKey: workbench.lic
  {{- else -}}
{{ template "chart.header" . }}
  {{- end }}
```


Alternatively, license files can be set during `helm install` with the following argument:

  {{- if eq .Name "rstudio-connect" -}}
`--set-file license.file.contents=licenses/connect.lic`
  {{- else if eq .Name "rstudio-pm" -}}
`--set-file license.file.contents=licenses/package-manager.lic`
  {{- else if eq .Name "rstudio-workbench" -}}
`--set-file license.file.contents=licenses/workbench.lic`
  {{- else -}}
{{ template "chart.header" . }}
  {{- end }}

### License Key

Set a license key directly in your values file (`license.key`) or during `helm install` with the argument `--set license.key=XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX`.

### License Server

Set a license server directly in your values file (`license.server`) or during `helm install` with the argument `--set license.server=<LICENSE_SERVER_HOST_ADDRESS>`.

{{- end }}

{{ define "rstudio.examples1" -}}
  {{ . }}
  {{ kindOf . }}
  {{ typeOf . }}
  {{ typeOf .Values }}
  {{ .ChartDirectory }}

  {{ toPrettyJson . }}
  # Examples
{{- end }}

{{ define "rstudio.examples" -}}
{{ . }}
{{ kindOf . }}
{{ typeOf . }}
{{ typeOf .Values }}
{{ .ChartDirectory }}

{{ toPrettyJson . }}
# Examples
{{- end }}

{{- /*
Interesting example that does not work... but I fought hard for... for some reason:

  {{ $currentScope := . }}
  {{ range $path, $_ := $.Files.Glob "{{ .ChartDirectory }}/ci/*.yaml" }}
    {{- with $currentScope }}
      {{ $.Files.Get $path }}
    {{- end }}
  {{ end }}
*/ -}}
