{{ template "rstudio.header" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "rstudio.description" . }}

{{ template "rstudio.best-practices" . }}

{{ template "rstudio.install" . }}

### NOTE

> NOTE: Off-Host execution via Kubernetes (a.k.a. running Connect content in
> their own dedicated pods) is now Generally Available. Please
> [see the formal documentation
> here](https://docs.posit.co/connect/admin/getting-started/off-host-install/).

> BREAKING: Current Beta users should be aware that the default OS has changed from
> bionic to jammy with the `2023.05.0` release. Existing content will be rebuilt
> the first time it runs. For more information, please see the Beta migration
> examples <https://github.com/rstudio/helm/tree/main/examples/connect/beta-migration>.

## Required Configuration

This chart requires the following in order to function:

* A license file, license key, or address of a running license server. See the [Licensing](#licensing) section below for more details.
* A Kubernetes [PersistentVolume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) that contains the data directory for Connect.
  * If `sharedStorage.create` is set, a PVC that relies on the default storage class will be created to generate the PersistentVolume.
    Most Kubernetes environments do not have a default storage class that you can use with `ReadWriteMany` access mode out-of-the-box.
    In this case, we recommend you disable `sharedStorage.create` and create your own `PersistentVolume` and `PersistentVolumeClaim`, then
    mount them into the container by specifying the `pod.volumes` and `pod.volumeMounts` parameters, or by specifying your `PersistentVolumeClaim` using `sharedStorage.name` and `sharedStorage.mount`.
  * If you cannot use a `PersistentVolume` to properly mount your data directory, you'll need to mount your data in the container
    by using a regular [Kubernetes Volume](https://kubernetes.io/docs/concepts/storage/volumes), specified in `pod.volumes` and `pod.volumeMounts`.

## Licensing

This chart supports activating the product using a license file, license key, or license server. In the case of a license file or key, we recommend against placing it in your values file directly.

### License File

We recommend storing a license file as a `Secret` and setting the `license.file.secret` and `license.file.secretKey` values accordingly.

First, create the secret declaratively with YAML or imperatively using the following command (replace `licenses/connect.lic` with the path and name of your license file):

```bash
kubectl create secret generic connect-license --from-file=licenses/connect.lic
```

Second, specify the following values:

```yaml
license:
  file:
    secret: connect-license
    secretKey: connect.lic
```

Alternatively, license files can be set directly in your values file or during `helm install` with `--set-file license.file.contents=licenses/connect.lic` (replace `licenses/connect.lic` with the path and name of your license file).

### License Key

Set a license key directly in your values file (`license.key`) or during `helm install` with `--set license.key=XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX`.

### License Server

Set a license server directly in your values file (`license.server`) or during `helm install` with `--set license.server=<LICENSE_SERVER_HOST_ADDRESS>` (replace `<LICENSE_SERVER_HOST_ADDRESS>` with your actual server address).

## General Principles

- In most places, we opt to pass helm values over configmaps. We translate these into the valid `.gcfg` file format
required by {{ template "chart.name" . }}.
- {{ template "chart.name" . }} does not export many prometheus metrics on its own. Instead, we run a sidecar graphite exporter
  [as described here](https://support.rstudio.com/hc/en-us/articles/360044800273-Monitoring-RStudio-Team-Using-Prometheus-and-Graphite)

## Configuration File

The configuration values all take the form of usual helm values
so you can set the database password with something like:

```
... --set config.Postgres.Password=mypassword ...
```

The Helm `config` values are converted into the `rstudio-connect.gcfg` service configuration file via go-templating.

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
