{{ template "rstudio.header" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "rstudio.description" . }}

{{ template "rstudio.disclaimer" . }}

{{ template "rstudio.install" . }}

## Usage

This chart deploys only the Chronicle server and is meant to be used in tandem
with the Workbench and Connect charts. To actually send data to the server, you
will need to run the Chronicle agent as a sidecar container on all of your
Workbench or Connect server pods by setting `pod.sidecar` in their respective
`values.yaml` files.

Here is an example of Helm values to run the agent sidecar in Workbench:

```yaml
pod:
  sidecar:
    - name: chronicle-agent
      image: posit-chronicle:2023.11.3
      volumeMounts:
      - name: CHRONICLE_PRODUCT_CLUSTER_ID
        value: "posit-cluster-1"
      - name: logs
        mountPath: "/var/lib/rstudio-server/audit"
      env:
      - name: CHRONICLE_SERVER_ADDRESS
        value: "http://chronicle-server.default.svc.cluster.local"
```

And here is an example of Helm values for Connect, where a Connect
API key from a Kubernetes Secret is used to unlock more detailed metrics:

```yaml
pod:
  sidecar:
    - name: chronicle-agent
      image: posit-chronicle:2023.11.3
      env:
      - name: CHRONICLE_PRODUCT_CLUSTER_ID
        value: "posit-cluster-1"
      - name: CHRONICLE_SERVER_ADDRESS
        value: "http://chronicle-server.default.svc.cluster.local"
      - name: CONNECT_API_KEY
        valueFrom:
          secretKeyRef:
            name: connect
            key: apikey
```

Note that it is up to the user to provision this Kubernetes Secret for the
Connect API key.

## Storage Configuration

Chronicle can be configured to persist data to a local Kubernetes volume, AWS
S3, or both.

The default configuration uses a local volume, which is suitable if you'd like to
access and analyze the data within your cluster:

```yaml
config:
  LocalStorage:
    Enabled: true
    Location: "/chronicle-data"
    RetentionPeriod: "30d"
```

`retentionPeriod` controls how long usage data are kept. For example, `"120m"`
for 120 minutes, `"36h"` for 36 hours, `14d` for two weeks, or `"0"` for
unbounded retention. (Units smaller than seconds or larger than days are not
supported.)

You can also persist data to AWS S3 instead of (or in addition to) local
storage:

```yaml
config:
  S3Storage:
    Enabled: true
    Bucket: "posit-chronicle"
    Region: "us-east-2"
```

### Using Iam for S3

If you are running on EKS, you can use [IAM Roles for Service
Accounts](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html)
to manage the credentials needed to access S3. In this scenario, once you have
[created an IAM
role](https://docs.aws.amazon.com/eks/latest/userguide/create-service-account-iam-policy-and-role.html),
you can use this role as an annotation on the existing Service Account:

```yaml
serviceaccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn:  arn:aws:iam::123456789000:role/iam-role-name-here
```

If you are unable to use IAM Roles for Service Accounts, there are any number of
alternatives for injecting AWS credentials into a container. As a fallback,
the S3 storage config allows specifying a profile:

```yaml
config:
  S3Storage:
    Enabled: true
    Bucket: "posit-chronicle"
    Profile: "my-aws-account"
    Region: "us-east-2"
```


### Needed S3 Policy Permissions
The credentials Chronicle uses for S3 storage must have the following permissions enabled:
- `s3:GetObject`
- `s3:ListBucket`
- `s3:PutObject`
- `s3:DeleteObject`

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}
